{"ast":null,"code":"import _slicedToArray from \"/Users/banbanaste/Desktop/areas/LambdaSchool/Web Applications 2/reducer-todo/state-todo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/banbanaste/Desktop/areas/LambdaSchool/Web Applications 2/reducer-todo/state-todo/src/components/List.js\";\nimport React, { useState, useReducer } from \"react\";\nimport { initState, todoReducer } from \"../reducers/todoReducer\";\nimport Todo from \"./Todo\";\n\nconst List = () => {\n  const _useReducer = useReducer(todoReducer, initState),\n        _useReducer2 = _slicedToArray(_useReducer, 2),\n        state = _useReducer2[0],\n        dispatch = _useReducer2[1];\n\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        newTodo = _useState2[0],\n        setNewTodo = _useState2[1];\n\n  const _useState3 = useState(state),\n        _useState4 = _slicedToArray(_useState3, 2),\n        todoList = _useState4[0],\n        setTodoList = _useState4[1];\n\n  const handleChanges = e => {\n    setNewTodo(e.target.value);\n  };\n\n  console.log(\"list state\", todoList);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"text\",\n    name: \"newTodo\",\n    value: newTodo,\n    onChange: handleChanges,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: () => dispatch({\n      type: \"ADD_TODO\",\n      payload: newTodo\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, \"Add Todo\")), todoList.map(todo => React.createElement(Todo, {\n    todo: todo,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  })));\n};\n\nexport default List;","map":{"version":3,"sources":["/Users/banbanaste/Desktop/areas/LambdaSchool/Web Applications 2/reducer-todo/state-todo/src/components/List.js"],"names":["React","useState","useReducer","initState","todoReducer","Todo","List","state","dispatch","newTodo","setNewTodo","todoList","setTodoList","handleChanges","e","target","value","console","log","type","payload","map","todo"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;AAEA,SAASC,SAAT,EAAoBC,WAApB,QAAuC,yBAAvC;AAEA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,MAAMC,IAAI,GAAG,MAAM;AAAA,sBACSJ,UAAU,CAACE,WAAD,EAAcD,SAAd,CADnB;AAAA;AAAA,QACVI,KADU;AAAA,QACHC,QADG;;AAAA,oBAEaP,QAAQ,CAAC,EAAD,CAFrB;AAAA;AAAA,QAEVQ,OAFU;AAAA,QAEDC,UAFC;;AAAA,qBAGeT,QAAQ,CAACM,KAAD,CAHvB;AAAA;AAAA,QAGVI,QAHU;AAAA,QAGAC,WAHA;;AAKjB,QAAMC,aAAa,GAAGC,CAAC,IAAI;AACzBJ,IAAAA,UAAU,CAACI,CAAC,CAACC,MAAF,CAASC,KAAV,CAAV;AACD,GAFD;;AAIAC,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BP,QAA1B;AAEA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,IAAI,EAAC,SAFP;AAGE,IAAA,KAAK,EAAEF,OAHT;AAIE,IAAA,QAAQ,EAAEI,aAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAOE;AACE,IAAA,OAAO,EAAE,MAAML,QAAQ,CAAC;AAAEW,MAAAA,IAAI,EAAE,UAAR;AAAoBC,MAAAA,OAAO,EAAEX;AAA7B,KAAD,CADzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAPF,CADF,EAcGE,QAAQ,CAACU,GAAT,CAAaC,IAAI,IAChB,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAEA,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CAdH,CADF;AAoBD,CA/BD;;AAiCA,eAAehB,IAAf","sourcesContent":["import React, { useState, useReducer } from \"react\";\n\nimport { initState, todoReducer } from \"../reducers/todoReducer\";\n\nimport Todo from \"./Todo\";\n\nconst List = () => {\n  const [state, dispatch] = useReducer(todoReducer, initState);\n  const [newTodo, setNewTodo] = useState(\"\");\n  const [todoList, setTodoList] = useState(state);\n\n  const handleChanges = e => {\n    setNewTodo(e.target.value);\n  };\n\n  console.log(\"list state\", todoList);\n\n  return (\n    <div>\n      <div>\n        <input\n          type=\"text\"\n          name=\"newTodo\"\n          value={newTodo}\n          onChange={handleChanges}\n        />\n        <button\n          onClick={() => dispatch({ type: \"ADD_TODO\", payload: newTodo })}\n        >\n          Add Todo\n        </button>\n      </div>\n      {todoList.map(todo => (\n        <Todo todo={todo} />\n      ))}\n    </div>\n  );\n};\n\nexport default List;\n"]},"metadata":{},"sourceType":"module"}